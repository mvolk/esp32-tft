/*
 * This library is released under the MIT License.
 *
 * Copyright (c) 2020 Michael Volk
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The above copyright notice, permission notice and disclaimer
 * shall be included in all copies or substantial portions of the
 * Software.
 */
#ifndef TFT_H
#define TFT_H

#include <freertos/freeRTOS.h>
#include <esp_err.h>


typedef enum {
    TFT_UPRIGHT,
    TFT_90_DEG,
    TFT_INVERTED,
    TFT_ROTATED_270_DEG
} tft_orientation_t;


typedef struct {
    /** @brief Color bit depth, e.g. 8, 16, 18, etc */
    uint8_t bitdepth;
    /** @brief Width in pixels as oriented */
    size_t width;
    /** @brief High in pixels as oriented */
    size_t height;
    /** @brief Orientation */
    tft_orientation_t orientation;
    /** @brief Device-specific state */
    void * device;
} tft_info_t;


typedef struct {
    tft_info_t info;
    /** @brief Function that rotates the display */
    esp_err_t (*set_orientation)(tft_info_t *, tft_orientation_t);
    /** @brief Function that renders a 16-bit raster */
    esp_err_t (*render16)(tft_info_t *, uint16_t *, uint8_t, uint8_t, uint8_t, uint8_t);
    /** @brief Function that renders a 16-bit raster */
    esp_err_t (*draw16_point)(tft_info_t *, uint16_t, uint8_t, uint8_t);
} tft_t;


typedef tft_t * tft_handle_t;


/**
 * @brief Create a 16-bit RGB565 color
 *
 * This method creates 2-byte (16-bit) color codes that
 * correct for the little endianness of the ESP32's
 * memory layout. When read out over SPI from
 * lowest-indexed byte to highest-indexed byte, the bits
 * generated by this method will be in the expected order
 * for RGB/565 encoding. When interpreted by an ESP32
 * as a uint16_t, however, the most and least significant
 * bytes will be inverted.
 *
 * @param red red pixel brightness, 0x07 - 0xFF
 * @param green green pixel brightness, 0x07 - 0xFF
 * @param blue blue pixel brightness, 0x03 - 0xFF
 * @return 16-bit RGB/565 color with inverted byte order
 */
uint16_t tft16_color_rgb565(
    uint8_t red,
    uint8_t green,
    uint8_t blue
);


/**
 * @brief Change the orientation of the display
 *
 * @param tft The TFT device decriptor
 * @param orientation The new orientation
 * @return error code or ESP_OK
 */
esp_err_t tft_set_orientation(
    tft_handle_t tft,
    tft_orientation_t orientation
);


/**
 * @brief Set the graphics displayed on the panel
 *
 * This flexible method can be used to update any
 * portion of the display from a single pixel
 * (x0==x1, y0==y1) to the entire display (x0 = 0,
 * y0 = 0, x1 = width - 1, y1 = height - 1), SPI
 * settings (max_transfer_sz) permitting.
 *
 * @param tft The TFT device decriptor
 * @param buffer The canvas data, 16 bits per pixel in
 *        big endian byte order, {x0, y0} pixel first,
 *        advancing through an entire column (x) before
 *        moving up to the next row (y). Origin is the
 *        lower left corner.
 * @param x0 X coordinate of the lower-left corner;
 *        must be < width
 * @param y0 Y coordinate of the lower-left corner
 *        must be < height
 * @param x1 X coordinate of the upper-right corner;
 *        must be >= x0; overflow will be cropped
 * @param y1 Y coordinate of the upper-right corner;
 *        must be >= y0; overflow will be cropped
 * @return error code or ESP_OK
 */
esp_err_t tft16_render(
    tft_handle_t tft,
    uint16_t * buffer,
    uint8_t x0,
    uint8_t y0,
    uint8_t x1,
    uint8_t y1
);


/**
 * @brief Set a single pixel displayed on the panel
 *
 * This method is slightly more optimal than
 * `tft16_render(...)` for painting single pixels, and
 * is thus better suited to use cases that involve
 * rendering directly to the panel rather than
 * rendering an in-MCU memory canvas and relaying
 * the canvas contents to the panel.
 *
 * @param device The TFT device descriptor
 * @param color a RGB/565 color code in big endian
 *        byte order (see the tft16_color_rgb565 function)
 * @param x X coordinate of the pixel, < width
 * @param y Y coordinate of the pixel, < height
 * @return error code or ESP_OK
 */
esp_err_t tft16_draw_point(
    tft_handle_t tft,
    uint16_t color,
    uint8_t x,
    uint8_t y
);


#endif // TFT_H
